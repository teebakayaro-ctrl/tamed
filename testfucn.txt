-- OutboundSpy_AllArgs.client.lua
-- ✅ Read-only spy, safe, ไม่ยุ่งกับ module
-- ✅ แสดง args ทั้งหมดทุกครั้งที่ client FireServer / InvokeServer

local function brief(v, depth)
    depth = depth or 0
    if depth > 2 then return "..." end
    local t = typeof(v)
    if t == "table" then
        local keys, n = {}, 0
        for k,_ in pairs(v) do
            n += 1
            if #keys < 6 then table.insert(keys, tostring(k)) end
        end
        return ("table{%s%s}"):format(table.concat(keys,","), n>6 and ",..." or "")
    elseif t == "Instance" then
        return ("Instance<%s>:%s"):format(v.ClassName, v.Name)
    else
        return ("%s(%s)"):format(t, tostring(v))
    end
end

local function summarizeArgs(args)
    local out = {}
    for i,v in ipairs(args) do
        out[#out+1] = ("[%d] %s"):format(i, brief(v))
    end
    return table.concat(out, " | ")
end

do
    local ok, mt = pcall(getrawmetatable, game)
    if not (ok and mt and mt.__namecall) then
        return warn("[OutboundSpy] __namecall hook unavailable.")
    end

    local old = mt.__namecall
    pcall(function() setreadonly(mt,false) end)

    mt.__namecall = function(self, ...)
        local m = getnamecallmethod and getnamecallmethod() or ""
        if (m == "FireServer" or m == "InvokeServer")
            and typeof(self)=="Instance"
            and (self:IsA("RemoteEvent") or self:IsA("RemoteFunction")) then

            local args = {...}
            print(("\n[Outbound] %s -> %s"):format(m, self:GetFullName()))
            print("   Args: "..(args))
        end
        return old(self, ...)
    end

    pcall(function() setreadonly(mt,true) end)
    print("[OutboundSpy] active. Printing ALL args.")
end
