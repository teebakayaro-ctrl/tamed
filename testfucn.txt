-- LassoArg13Spy.client.lua
local RS = game:GetService("ReplicatedStorage")
local repFolder = RS:WaitForChild("_replicationFolder")
local ok, Lasso = pcall(require, repFolder:WaitForChild("Lasso"))

-- dumper สั้น ๆ ไม่สแปม
local function brief(v, depth, seen)
	depth = depth or 0; seen = seen or {}
	local t = typeof(v)
	if t == "table" then
		if seen[v] then return "{<cycle>}" end
		seen[v] = true
		local keys, n = {}, 0
		for k,_ in pairs(v) do
			n += 1
			if #keys < 6 then table.insert(keys, tostring(k)) end
		end
		return "table{"..table.concat(keys,",")..(n > 6 and ",..." or "").."}"
	elseif t == "Instance" then
		return ("Instance<%s>:%s"):format(v.ClassName, v.Name)
	else
		return ("%s(%s)"):format(t, tostring(v))
	end
end

local function printOnly13(args)
	-- arg[1]
	if args[1] ~= nil then
		print(" arg[1] = "..brief(args[1]))
	end
	-- arg[3] (ถ้ามี)
	if args[3] ~= nil then
		print(" arg[3] = "..brief(args[3]))
	end
end

local function safeWrap(tbl, fnName)
	local f = tbl and tbl[fnName]
	if type(f) ~= "function" then
		print(("[Spy] %s not a function (type=%s)"):format(fnName, typeof(f)))
		return
	end
	tbl[fnName] = function(...)
		local a = {...}
		print("[Spy] "..fnName.." called:")
		printOnly13(a)
		-- เรียกของเดิมแบบปลอดภัย
		local okCall, r1, r2, r3, r4 = pcall(f, table.unpack(a))
		if not okCall then
			warn("[Spy] "..fnName.." error: ", r1)
			return nil
		end
		return r1, r2, r3, r4
	end
	print("[Spy] Wrapped "..fnName.." (printing only arg[1], arg[3])")
end

if ok and type(Lasso) == "table" then
	safeWrap(Lasso, "_hit")
	safeWrap(Lasso, "doLasso")
else
	warn("[Spy] Could not require Lasso module.")
end
