-- TrimmedRemoteSpy.client.lua
-- Put into StarterPlayerScripts

local RS = game:GetService("ReplicatedStorage")

-- helper to summarize any value without huge spam
local function summarize(v, depth)
	depth = depth or 0
	if depth > 1 then return "..." end
	local t = typeof(v)
	if t == "table" then
		local parts = {}
		local n = 0
		for k,_ in pairs(v) do
			n += 1
			if n > 5 then break end
			table.insert(parts, tostring(k))
		end
		return "table{keys="..table.concat(parts,",")..(n>5 and ",..." or "").."}"
	elseif t == "Instance" then
		return "Instance<"..v.ClassName..">:"..v.Name
	else
		return t.."("..tostring(v)..")"
	end
end

local function summarizeArgs(args)
	local out = {}
	for i,v in ipairs(args) do
		out[#out+1] = "["..i.."] "..summarize(v)
	end
	return table.concat(out, " | ")
end

-- hook client->server calls
do
	local ok, mt = pcall(getrawmetatable, game)
	if ok and mt and mt.__namecall then
		local old = mt.__namecall
		pcall(function() setreadonly(mt,false) end)
		mt.__namecall = function(self, ...)
			local m = getnamecallmethod and getnamecallmethod() or ""
			if (m=="FireServer" or m=="InvokeServer") and typeof(self)=="Instance" 
				and (self:IsA("RemoteEvent") or self:IsA("RemoteFunction")) then
				local args = {...}
				print(("\n[Spy] %s -> %s"):format(m, self:GetFullName()))
				print("   Args: "..summarizeArgs(args))
			end
			return old(self, ...)
		end
		pcall(function() setreadonly(mt,true) end)
		print("[TrimSpy] __namecall hook active.")
	else
		print("[TrimSpy] __namecall hook not available in this environment.")
	end
end

print("[TrimSpy] Ready. Do a tame, watch console for FireServer/InvokeServer calls.")
