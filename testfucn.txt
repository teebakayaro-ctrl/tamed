-- SafeTameSpy.client.lua
local RS = game:GetService("ReplicatedStorage")
local StarterPlayer = game:GetService("StarterPlayer")
local StarterGui = game:GetService("StarterGui")

-- ---------- pretty dump ----------
local function fullName(i)
  local t={}
  while i do t[#t+1]=i.Name; i=i.Parent end
  for l,r=1,#t//2 do t[l],t[#t-l+1]=t[#t-l+1],t[l] end
  return table.concat(t,".")
end

local function dump(v, d, seen)
  d, seen = d or 0, seen or {}
  local pad = string.rep("  ", d)
  local ty = typeof(v)
  if ty=="table" then
    if seen[v] then return pad.."{<cycle>}" end
    seen[v]=true
    local out={pad.."{\n"}
    for k,val in pairs(v) do
      out[#out+1]=pad.."  ["..tostring(k)..":"..typeof(k).."] = "..dump(val,d+1,seen).."\n"
    end
    out[#out+1]=pad.."}"
    return table.concat(out)
  elseif ty=="Instance" then
    return pad.."Instance("..v.ClassName.."):"..fullName(v)
  else
    return pad..ty.."("..tostring(v)..")"
  end
end

local function dumpArgs(args)
  for i,v in ipairs(args) do
    print(("  arg[%d]: %s"):format(i, dump(v)))
  end
end

-- ---------- server->client remote logging ----------
local function hookRemote(r)
  if r:IsA("RemoteEvent") then
    r.OnClientEvent:Connect(function(...)
      print("\n[Spy] OnClientEvent <-", r:GetFullName())
      dumpArgs({...})
    end)
  elseif r:IsA("RemoteFunction") then
    r.OnClientInvoke = function(...)
      print("\n[Spy] OnClientInvoke <-", r:GetFullName())
      dumpArgs({...})
      return nil
    end
  end
end

local function scan(root)
  if not root then return end
  for _,x in ipairs(root:GetDescendants()) do
    if x:IsA("RemoteEvent") or x:IsA("RemoteFunction") then hookRemote(x) end
  end
  root.DescendantAdded:Connect(function(x)
    if x:IsA("RemoteEvent") or x:IsA("RemoteFunction") then
      print("[Spy] New remote:", x:GetFullName(), x.ClassName)
      hookRemote(x)
    end
  end)
end

scan(RS)
scan(StarterPlayer)
scan(StarterGui)
scan(RS:FindFirstChild("_replicationFolder"))

-- ---------- optional client->server logging (only if allowed) ----------
do
  local ok, mt = pcall(getrawmetatable, game)
  if ok and mt and mt.__namecall then
    local old = mt.__namecall
    pcall(function() setreadonly(mt,false) end)
    mt.__namecall = function(self, ...)
      local m = getnamecallmethod and getnamecallmethod() or ""
      if (m=="FireServer" or m=="InvokeServer") and typeof(self)=="Instance"
         and (self:IsA("RemoteEvent") or self:IsA("RemoteFunction")) then
        print(("\n[Spy] %s -> %s"):format(m, self:GetFullName()))
        dumpArgs({...})
      end
      return old(self, ...)
    end
    pcall(function() setreadonly(mt,true) end)
    print("[Spy] __namecall hook active.")
  else
    print("[Spy] __namecall hook unavailable here (that’s fine, server->client logs still work).")
  end
end

-- ---------- SAFE wrap of _replicationFolder.Lasso (if a ModuleScript) ----------
local function safeWrap(modTbl, fnName)
  local original = modTbl[fnName]
  print(("[Lasso] %s exists? %s (%s)"):format(fnName, original~=nil, typeof(original)))
  if type(original) ~= "function" then return end
  modTbl[fnName] = function(...)
    local args = {...}
    print(("\n[Lasso] %s called with:"):format(fnName))
    dumpArgs(args)
    -- call original safely
    local ok, a,b,c,d,e = pcall(original, table.unpack(args))
    if not ok then warn("[Lasso] "..fnName.." error:", a) return end
    return a,b,c,d,e
  end
end

do
  local rf = RS:FindFirstChild("_replicationFolder")
  if rf then
    local lassoModule = rf:FindFirstChild("Lasso")
    if lassoModule and lassoModule:IsA("ModuleScript") then
      local ok, tbl = pcall(require, lassoModule)
      if ok and type(tbl)=="table" then
        print("[Lasso] Module required. Trying to wrap candidate functions…")
        -- ONLY wrap if real functions; otherwise just report their type
        safeWrap(tbl, "doLasso")
        safeWrap(tbl, "_hit")
        safeWrap(tbl, "throw")
        safeWrap(tbl, "attach")
        safeWrap(tbl, "release")
      else
        print("[Lasso] require() returned:", typeof(tbl))
      end
    else
      print("[Lasso] Not a ModuleScript (or missing). Skipping function wrap.")
    end
  end
end

print("[SafeTameSpy] Ready. Do a normal tame and watch the console.")
