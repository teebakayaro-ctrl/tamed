-- Lasso Sentinel v3 â€” auto-(re)wrap doLasso/_hit even if the module reloads
-- Output: prints only when doLasso/_hit are called.
-- Stores: _G.LASSO_LASTARGS_doLasso, _G.LASSO_LASTRET_doLasso, _G.LASSO_LASTARGS__hit, _G.LASSO_LASTRET__hit

local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- safe debug helpers
local function dinfo(fn, what) local ok,a,b=pcall(debug.info,fn,what); if ok then return a,b end end
local function full(i) local ok,f=pcall(function() return i:GetFullName() end); return ok and f or tostring(i) end
local function pretty(v)
  local t=typeof(v)
  if t=="Instance" then local okn,nm=pcall(function() return v.Name end); return ("<%s:%s>"):format(v.ClassName, okn and nm or "?") end
  local ok,s=pcall(function() return tostring(v) end); return ok and s or ("<"..t..">")
end
local function preview(p, cap) cap=cap or 6; local n=p.n or #p; local parts={}; for i=1,math.min(n,cap) do parts[i]=("["..i.."] "..pretty(p[i])) end; if n>cap then parts[#parts+1]=("...(+%d)"):format(n-cap) end; return table.concat(parts,"  ") end

-- locate Lasso module
local root = ReplicatedStorage:FindFirstChild("_replicationFolder", true)
if not root then return warn("[Lasso-Sentinel] _replicationFolder not found") end
local lassoMS = root:FindFirstChild("Lasso", true)
if not (lassoMS and lassoMS:IsA("ModuleScript")) then return warn("[Lasso-Sentinel] Lasso ModuleScript not found") end
local LASSO_SRC = full(lassoMS)

local wrapped, owners, targetsByName = {}, {}, {}

local function makeWrapper(label, fn)
  return function(...)
    local a=table.pack(...)
    _G["LASSO_LASTARGS_"..label]=a
    print(("["..label.."] args -> %s"):format(preview(a)))
    local r=table.pack(fn(...))
    _G["LASSO_LASTRET_"..label]=r
    return table.unpack(r,1,r.n)
  end
end

local function addOwner(targetFn, kind, owner, key)
  owners[targetFn]=owners[targetFn] or {}
  table.insert(owners[targetFn], {kind=kind, owner=owner, key=key})
end

local function scanUpvalues(fn)
  -- get upvalue count (robust)
  local u = dinfo(fn,"u"); if type(u)~="number" then
    local i=1; while true do local ok,n=pcall(debug.getupvalue,fn,i); if not ok or n==nil then break end; i=i+1 end; u=i-1
  end
  for i=1,u do
    local ok,nm,val = pcall(function() local n,v=debug.getupvalue(fn,i); return n,v end)
    if ok and nm~=nil then
      if typeof(val)=="function" then
        local src = dinfo(val,"s") or ""
        local name = dinfo(val,"n") or ""
        if src:find(LASSO_SRC,1,true) and (name=="_hit" or name=="doLasso") then
          targetsByName[name]=val; addOwner(val,"upvalue",fn,i)
        end
      elseif typeof(val)=="table" then
        for k,vv in pairs(val) do
          if typeof(vv)=="function" then
            local src = dinfo(vv,"s") or ""; local name=dinfo(vv,"n") or ""
            if src:find(LASSO_SRC,1,true) and (name=="_hit" or name=="doLasso") then
              targetsByName[name]=vv; addOwner(vv,"table",val,k)
            end
          end
        end
      end
    end
  end
end

local function wrapFnIfTarget(fn)
  if wrapped[fn] then return end
  local name = dinfo(fn,"n") or ""
  if name=="_hit" or name=="doLasso" then
    local wrapper = makeWrapper(name, fn)
    -- prefer hookfunction if available
    if type(hookfunction)=="function" then pcall(hookfunction, fn, wrapper) end
    -- patch recorded owners too
    if owners[fn] then
      for _,ref in ipairs(owners[fn]) do
        if ref.kind=="upvalue" and typeof(ref.owner)=="function" then pcall(debug.setupvalue, ref.owner, ref.key, wrapper) end
        if ref.kind=="table"   and typeof(ref.owner)=="table"   then pcall(function() ref.owner[ref.key]=wrapper end) end
      end
    end
    wrapped[fn]=true
    print("[Lasso-Sentinel] wrapped "..name)
  end
end

local function sweep()
  owners, targetsByName = {}, {}
  -- try getgc for best coverage
  local usedGc = false
  if type(getgc)=="function" then
    usedGc = true
    for _,obj in ipairs(getgc(true)) do
      if typeof(obj)=="function" then
        local src = dinfo(obj,"s") or ""
        if src:find(LASSO_SRC,1,true) then
          local nm = dinfo(obj,"n") or ""
          if nm=="_hit" or nm=="doLasso" then targetsByName[nm]=obj end
          scanUpvalues(obj)
        end
      end
    end
  end
  -- fallback: crawl from require(Lasso)
  if not usedGc then
    local ok,L = pcall(require, lassoMS)
    if ok then
      local q, seenT = {L}, {}
      while #q>0 do
        local v = table.remove(q)
        local t = typeof(v)
        if t=="function" then
          local src = dinfo(v,"s") or ""
          if src:find(LASSO_SRC,1,true) then
            local nm = dinfo(v,"n") or ""
            if nm=="_hit" or nm=="doLasso" then targetsByName[nm]=v end
            scanUpvalues(v)
          end
        elseif t=="table" and not seenT[v] then
          seenT[v]=true; for _,vv in pairs(v) do table.insert(q,vv) end
        end
      end
    end
  end
  for _,fn in pairs(targetsByName) do wrapFnIfTarget(fn) end
end

-- run now and keep re-sweeping
sweep()
task.spawn(function()
  while true do task.wait(1.0); sweep() end
end)

print("[Lasso-Sentinel] running. Play normally; when _hit/doLasso fire you'll see their exact args printed.")
