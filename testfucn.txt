local RS = game:GetService("ReplicatedStorage")
local repFolder = RS:WaitForChild("_replicationFolder")
local ok, Lasso = pcall(require, repFolder:WaitForChild("Lasso"))

-- Pretty dumper for any value
local function dump(val, depth, seen)
	depth = depth or 0
	seen = seen or {}
	local t = typeof(val)
	if t == "table" then
		if seen[val] then return "{<cycle>}" end
		seen[val] = true
		local out = {"{\n"}
		for k,v in pairs(val) do
			table.insert(out, string.rep("  ", depth+1) .. "["..tostring(k).."] = " .. dump(v, depth+1, seen) .. "\n")
		end
		table.insert(out, string.rep("  ", depth).."}")
		return table.concat(out)
	elseif t == "Instance" then
		return "Instance<"..val.ClassName..">:"..val:GetFullName()
	else
		return t.."("..tostring(val)..")"
	end
end

local function safeWrap(tbl, fnName)
	if type(tbl[fnName]) == "function" then
		local old = tbl[fnName]
		tbl[fnName] = function(...)
			print("[Spy] "..fnName.." called:")
			local args = {...}
			for i,v in ipairs(args) do
				if i ~= 2 then 
					print(" arg["..i.."] = "..dump(v))
				end
			end
			return old(...)
		end
		print("[Spy] Wrapped "..fnName)
	else
		print("[Spy] "..fnName.." not a function, type="..typeof(tbl[fnName]))
	end
end

if ok and type(Lasso)=="table" then
	safeWrap(Lasso, "_hit")
	safeWrap(Lasso, "doLasso")
else
	warn("[Spy] Could not require Lasso module.")
end
