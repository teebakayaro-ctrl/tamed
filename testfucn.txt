-- SafeTameSpy.client.lua
local RS = game:GetService("ReplicatedStorage")

-- ---------- pretty dump ----------
local function fullName(i)
  local t={}
  while i do t[#t+1]=i.Name; i=i.Parent end
  for l,r=1,#t//2 do t[l],t[#t-l+1]=t[#t-l+1],t[l] end
  return table.concat(t,".")
end

local function dump(v, d, seen)
  d, seen = d or 0, seen or {}
  local pad = string.rep("  ", d)
  local ty = typeof(v)
  if ty=="table" then
    if seen[v] then return pad.."{<cycle>}" end
    seen[v]=true
    local out={pad.."{\n"}
    for k,val in pairs(v) do
      out[#out+1]=pad.."  ["..tostring(k)..":"..typeof(k).."] = "..dump(val,d+1,seen).."\n"
    end
    out[#out+1]=pad.."}"
    return table.concat(out)
  elseif ty=="Instance" then
    return pad.."Instance("..v.ClassName.."):"..fullName(v)
  else
    return pad..ty.."("..tostring(v)..")"
  end
end

local function dumpArgs(args)
  for i,v in ipairs(args) do
    print(("  arg[%d]: %s"):format(i, dump(v)))
  end
end

-- ---------- server->client remote logging ----------
local function hookRemote(r)
  if r:IsA("RemoteEvent") then
    r.OnClientEvent:Connect(function(...)
      print("\n[Spy] OnClientEvent <-", r:GetFullName())
      dumpArgs({...})
    end)
  elseif r:IsA("RemoteFunction") then
    r.OnClientInvoke = function(...)
      print("\n[Spy] OnClientInvoke <-", r:GetFullName())
      dumpArgs({...})
      return nil
    end
  end
end

local function scan(root)
  if not root then return end
  for _,x in ipairs(root:GetDescendants()) do
    if x:IsA("RemoteEvent") or x:IsA("RemoteFunction") then hookRemote(x) end
  end
  root.DescendantAdded:Connect(function(x)
    if x:IsA("RemoteEvent") or x:IsA("RemoteFunction") then
      print("[Spy] New remote:", x:GetFullName(), x.ClassName)
      hookRemote(x)
    end
  end)
end

scan(RS)

print("[SafeTameSpy] Ready. Do a normal tame and watch the console.")
