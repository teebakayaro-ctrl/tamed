--!strict
-- Minimal Horse Overlay: Species + Distance only (transparent background)
-- Toggle with H

local Players = game:GetService("Players")
local CollectionService = game:GetService("CollectionService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local UIS = game:GetService("UserInputService")
local LP = Players.LocalPlayer

local CONFIG = {
    SCAN_INTERVAL = 0.3,
    MAX_RADIUS = 350,
    TEXT_SIZE = 16,
    TEXT_COLOR = Color3.fromRGB(235,255,235),
    SPECIES_ATTR = "Species",
    NAME_MATCH = { "Horse","Unicorn","Gargoyle","Equus","Bisorse","Pony","Caprine","Kelpie","Peryton","Fae","Plush","Flora","Cybred","Celestial","Saurequine","Hippocampus","Kirin","Cactaline","Clydesdale","Felorse","Akhal","Teke" },
    TAGS = { "Horse","WildHorse","Mount","Tameable" },
    STUDS_OFFSET_Y = 4,
    MAX_DISTANCE_ON_LABEL = 9999,
}

local function char() return LP.Character or LP.CharacterAdded:Wait() end
local function rootOf(m: Model): BasePart?
    return m:FindFirstChild("HumanoidRootPart") or m:FindFirstChild("Torso") or m:FindFirstChildWhichIsA("BasePart")
end
local function isPlayerCharacter(m: Instance): boolean
    if not m:IsA("Model") then return false end
    if Players:GetPlayerFromCharacter(m) then return true end
    local parent = m.Parent
    if parent and parent.Name == "Characters" then
        for _, p in ipairs(Players:GetPlayers()) do
            if p.Name == m.Name then return true end
        end
    end
    return false
end
local function hasAnyTag(inst: Instance, tags: {string})
    for _, t in ipairs(tags) do if CollectionService:HasTag(inst, t) then return true end end
    return false
end
local function looksHorseyName(s: string): boolean
    local low = string.lower(s)
    for _, frag in ipairs(CONFIG.NAME_MATCH) do
        if low:find(string.lower(frag)) then return true end
    end
    return false
end
local function getAttr(inst: Instance, k: string)
    local ok, v = pcall(function() return inst:GetAttribute(k) end)
    return ok and v or nil
end
local function isHorseLike(m: Instance): boolean
    if not m:IsA("Model") then return false end
    if isPlayerCharacter(m) then return false end
    if not rootOf(m) then return false end
    if hasAnyTag(m, CONFIG.TAGS) then return true end
    local spec = getAttr(m, CONFIG.SPECIES_ATTR)
    if type(spec) == "string" and looksHorseyName(spec) then return true end
    if looksHorseyName(m.Name) then return true end
    for _, d in ipairs(m:GetDescendants()) do
        if d:IsA("ProximityPrompt") then
            local t = string.lower((d.ActionText or "") .. " " .. (d.ObjectText or ""))
            if t:find("tame") or t:find("mount") or t:find("ride") then return true end
        end
    end
    return false
end

-- ===== Billboard (transparent) =====
local function makeBillboard(): BillboardGui
    local bb = Instance.new("BillboardGui")
    bb.Name = "HorseMiniBB"
    bb.AlwaysOnTop = true
    bb.Size = UDim2.fromOffset(260, 20)
    bb.StudsOffset = Vector3.new(0, CONFIG.STUDS_OFFSET_Y, 0)
    bb.MaxDistance = 500
    bb.LightInfluence = 0

    -- Transparent background: no Frame. TextLabel only.
    local txt = Instance.new("TextLabel")
    txt.Name = "Text"
    txt.BackgroundTransparency = 1
    txt.Size = UDim2.fromScale(1, 1)
    txt.Position = UDim2.fromOffset(0, 0)
    txt.TextXAlignment = Enum.TextXAlignment.Center
    txt.Font = Enum.Font.Code
    txt.TextSize = CONFIG.TEXT_SIZE
    txt.TextColor3 = CONFIG.TEXT_COLOR
    txt.Text = ""
    txt.Parent = bb

    -- Optional outline for readability (still transparent background)
    local uiStroke = Instance.new("UIStroke")
    uiStroke.Color = Color3.new(0,0,0)
    uiStroke.Thickness = 1
    uiStroke.Parent = txt

    return bb
end

local overlays: {[Model]: BillboardGui} = {}
local active = true

local function ensureOverlay(m: Model): BillboardGui
    local bb = overlays[m]
    if bb and bb.Parent then return bb end
    local root = rootOf(m); if not root then error("no root") end
    bb = makeBillboard()
    bb.Adornee = root
    bb.Parent = m
    overlays[m] = bb
    return bb
end

local function forgetOverlay(m: Model)
    local bb = overlays[m]
    if bb then bb:Destroy(); overlays[m] = nil end
end

local function speciesOf(m: Model): string
    local s = getAttr(m, CONFIG.SPECIES_ATTR)
    if type(s) == "string" and #s > 0 then return s end
    for _, frag in ipairs(CONFIG.NAME_MATCH) do
        if string.lower(m.Name):find(string.lower(frag)) then return frag end
    end
    return "Unknown"
end

-- ===== Main loop =====
task.spawn(function()
    local c = char()
    local myRoot = rootOf(c) :: BasePart

    while true do
        task.wait(CONFIG.SCAN_INTERVAL)

        if not active then
            for _, bb in pairs(overlays) do bb.Enabled = false end
            continue
        end

        if not myRoot or not myRoot.Parent then
            c = char(); myRoot = rootOf(c) :: BasePart
        end
        local origin = myRoot.Position

        local seen: {[Model]: boolean} = {}
        for _, inst in ipairs(Workspace:GetDescendants()) do
            if inst:IsA("Model") and isHorseLike(inst) then
                local root = rootOf(inst)
                if root then
                    local dist = (root.Position - origin).Magnitude
                    if dist <= CONFIG.MAX_RADIUS then
                        local bb = ensureOverlay(inst); bb.Enabled = true
                        local label = (bb:FindFirstChild("Text") :: TextLabel)
                        label.Text = string.format("%s â€” %.1f", speciesOf(inst), math.min(dist, CONFIG.MAX_DISTANCE_ON_LABEL))
                        seen[inst] = true
                    end
                end
            end
        end

        for m in pairs(overlays) do
            if not m.Parent or not seen[m] then forgetOverlay(m) end
        end
    end
end)

-- Toggle overlays
UIS.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    if input.KeyCode == Enum.KeyCode.H then
        active = not active
        for _, bb in pairs(overlays) do bb.Enabled = active end
        print(("[HorseMini] %s"):format(active and "ON" or "OFF"))
    end
end)
