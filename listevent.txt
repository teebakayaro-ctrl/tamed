-- RemoteLogger.client.lua
local RS = game:GetService("ReplicatedStorage")
local SP = game:GetService("StarterPlayer")
local SG = game:GetService("StarterGui")

-- Folders to search
local searchRoots = {
	RS,
	SP,
	SG,
	RS:FindFirstChild("_replicationFolder"),
}

-- Utility
local function logRemote(r)
	print(("[RemoteLogger] %s (%s)"):format(r:GetFullName(), r.ClassName))

	-- Hook events to see traffic
	if r:IsA("RemoteEvent") then
		r.OnClientEvent:Connect(function(...)
			print(("[RemoteLogger] OnClientEvent <- %s :"):format(r:GetFullName()), ...)
		end)
	elseif r:IsA("RemoteFunction") then
		-- You can't hook InvokeServer calls directly,
		-- but you can safely wrap InvokeClient (server->client).
		r.OnClientInvoke = function(...)
			print(("[RemoteLogger] OnClientInvoke <- %s :"):format(r:GetFullName()), ...)
			-- return a dummy response so game won't error
			return nil
		end
	end
end

-- Scan all descendants
for _, root in ipairs(searchRoots) do
	if root then
		for _, inst in ipairs(root:GetDescendants()) do
			if inst:IsA("RemoteEvent") or inst:IsA("RemoteFunction") then
				logRemote(inst)
			end
		end
	end
end

-- Also watch for new remotes that appear later
for _, root in ipairs(searchRoots) do
	if root then
		root.DescendantAdded:Connect(function(inst)
			if inst:IsA("RemoteEvent") or inst:IsA("RemoteFunction") then
				print("[RemoteLogger] New remote added:", inst:GetFullName(), inst.ClassName)
				logRemote(inst)
			end
		end)
	end
end

print("[RemoteLogger] Ready, logging all remotes in ReplicatedStorage, StarterPlayer, StarterGui, and _replicationFolder")
